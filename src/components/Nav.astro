---
const links = [
  { href: '/', label: 'Home' },
  { href: '/blog', label: 'Blog' },
];
import ThemeToggle from './ThemeToggle.astro';
import LangToggle from './LangToggle.astro';
import { getT, onLangChange } from '../i18n/index.ts';
---

<nav
  class="border-b border-neutral-200/60 bg-white/70 backdrop-blur dark:border-neutral-800 dark:bg-neutral-950/70"
>
  <div class="container relative flex h-14 items-center">
    <a href="/" class="inline-flex items-center gap-2" aria-label="Inicio">
      <img
        src="/logo.png"
        alt="Martin Ruiz"
        width="120"
        height="24"
        class="h-12 w-auto block dark:hidden"
      />
      <img
        src="/logo-dark.png"
        alt="Martin Ruiz"
        width="120"
        height="24"
        class="h-12 w-auto hidden dark:block"
      />
    </a>
    <div class="flex-1 flex justify-center items-center gap-4">
      <div
        class="relative rounded-full border border-neutral-200/60 bg-white/80 p-1 shadow-sm backdrop-blur dark:border-neutral-800 dark:bg-neutral-900/70"
      >
        <div class="flex items-center gap-2">
          {
            links.map((l) => {
              const currentPath = Astro.url.pathname;
              const active =
                l.href === '/'
                  ? currentPath === '/'
                  : currentPath.startsWith(l.href);
              return (
                <a
                  href={l.href}
                  aria-current={active ? 'page' : undefined}
                  aria-label={l.label}
                  class={[
                    'inline-flex items-center h-10 rounded-full transition-all',
                    active
                      ? 'pl-2 pr-4 bg-neutral-900 text-white dark:bg-white dark:text-neutral-900'
                      : 'p-2 bg-neutral-100 text-neutral-700 hover:bg-neutral-200 dark:bg-neutral-800 dark:text-neutral-300 dark:hover:bg-neutral-700',
                  ].join(' ')}
                >
                  {l.label === 'Home' ? (
                    <svg
                      width="18"
                      height="18"
                      viewBox="0 0 24 24"
                      aria-hidden="true"
                      class="shrink-0"
                      fill="currentColor"
                    >
                      <path d="M12 3.172 3 10v10a1 1 0 0 0 1 1h6v-6h4v6h6a1 1 0 0 0 1-1V10l-9-6.828z" />
                    </svg>
                  ) : (
                    <svg
                      width="18"
                      height="18"
                      viewBox="0 0 24 24"
                      aria-hidden="true"
                      class="shrink-0"
                      fill="currentColor"
                    >
                      <path d="M4 5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H9l-5 4v-4a2 2 0 0 1-2-2V5z" />
                    </svg>
                  )}
                  <span
                    aria-hidden="true"
                    class={[
                      'overflow-hidden text-sm transition-all duration-300',
                      active
                        ? 'ml-1.5 max-w-[160px] opacity-100'
                        : 'ml-0 max-w-0 opacity-0',
                    ].join(' ')}
                  >
                    {l.label}
                  </span>
                </a>
              );
            })
          }
        </div>
      </div>
    </div>
    <div class="ml-auto flex items-center gap-3">
      <LangToggle />
      <ThemeToggle />
    </div>

    <script type="module">
      import { getT, onLangChange } from '/src/i18n/index.ts';
      // Replace labels from i18n on language change (client-side enhancement)
      const t = (path) => {
        try {
          return getT(document.documentElement.lang)(path);
        } catch {
          return path;
        }
      };
      const updateNavLabels = () => {
        const links = document.querySelectorAll('nav a[aria-label]');
        links.forEach((a) => {
          const href = a.getAttribute('href');
          const key =
            href === '/'
              ? 'nav.home'
              : href?.startsWith('/blog')
                ? 'nav.blog'
                : '';
          if (!key) return;
          a.setAttribute('aria-label', t(key));
          const span = a.querySelector('span[aria-hidden]');
          if (span) span.textContent = t(key);
        });
      };
      updateNavLabels();
      onLangChange(() => updateNavLabels());
      const main = document.querySelector('main');
      // Fade-in on load
      if (main) {
        main.classList.add('page-enter');
        setTimeout(() => main.classList.remove('page-enter'), 500);
      }
      // Intercept nav clicks for a short fade-out
      document.querySelectorAll('a[href^="/"]').forEach((a) => {
        a.addEventListener('click', (e) => {
          const url = new URL(a.href, location.origin);
          if (url.origin !== location.origin) return; // external
          if (e.metaKey || e.ctrlKey || e.shiftKey || e.altKey) return; // new tab, etc
          if (!main) return;
          e.preventDefault();
          main.classList.add('page-exit');
          setTimeout(() => {
            window.location.href = a.href;
          }, 380);
        });
      });
    </script>
  </div>
</nav>
